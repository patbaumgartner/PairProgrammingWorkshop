# Small Exercises {#Exercises}
The next pages contain a lot of small exercises. The idea is to print them and distribute them to the different workshop participants. The idea is that the participants will do extreme promiscuing pairing. Every 15 minutes they will shift partner.

## Sum of digits - Min and Max
Write a program that generates 100 random numbers between 2000 and 3000. Once the numbers have been generated, find and display the two numbers with the largest and smallest sum of digits. For instance, SumDigits(2825) = 2 + 8 + 2 + 5 = 17.

## Symmetric numbers
Write a program that generates 100 random numbers between 1000 and 9999. Once the numbers have been generated, find and display the numbers which are "axially symmetric", which means that their records are of type XYYX. For instance, 1221 is axially symmetric.

## Equilibrated numbers
Write a program that generates 100 random numbers between 1000 and 9999. Once the numbers have been generated, find the numbers for which the sum of tens and ones is equal to the sum of hundreds and thousands. For instance, 4426 is equilibrated because 4 + 4 = 2 + 6.

## Who and what
Write a program that read words (strings) from the standard input. Every word will start with either a large or a small letter. The program will read up to 10 words, with some way of detecting when the user has finished inputting words. After that, the program starts writing to the standard output (screen). For each word, if it begins with a capital letter (eg "Sarah"), the program prints out the sentence: "Who? Sarah" and starts a new line. If the word starts with a small letter (eg "singing"), it prints out "What? singing", and starts a new line.

## The number with the most divisors - Input
Write a program that reads integers from the standard input. Inputs should be between 1 and 1000. The user ends the input by entering 0. Find the number with the maximum number of divisors. For instance, if the inputs are 12 and 5: 12 has six divisors (1, 2, 3, 4, 6, and 12). But 5 only has two divisors (1 and 5).

## "Root-ing"
Some numbers are very "nice" for rooting - the root of the number 16, for example, is precisely 4. But for some numbers, rooting is not easy at all - the root of the number 15, for example, can not be expressed as a decimal.

Some numbers can be partially expressed by root. An example of a number like this is 80, which can be expressed as 4 * (root 5). This is because 80 = 16 * 5, so (root 80) = (root 16) * (root 5) = 4 * (root 5).

Write a program that will ask for an integer that is smaller than 30,000, and will then write its partial roots.

**EXAMPLES:**

Input: 16

Output: 4-TIMES SQRT OF 1


Input: 15

Output: 1-TIMES SQRT OF 15


Input: 80

Output: 4-TIMES SQRT OF 5

## Gambling
Lucky knows that gambling is a tough task. Write him a program that will simulate throwing dice so that the program will keep "throwing" the dice as long as the sum of all throws does not exceed 100. After each "throw", the program should print out the last throw and the total sum. When a throw takes the total over 100, the program will stop. Finally, print out the total number of dice throws.

**SAMPLE FINAL OUTPUT:**

Last throw: 2

Sum of all throws: 99

Total number of throws: 34

## Armstrong numbers
Write me a program that computes all Armstrong numbers in the range of 0 and 999. An Armstrong number is a number such that the sum of its digits raised to the third power is equal to the number itself. For example, 371 is an Armstrong number, since 3^3 + 7^3 + 1^3 = 371.

## Fibonacci series
Write a program in Java to print Fibonacci series up to given number? That given number, must be random generated by the application and printed to the output and let say it must be between 0 and 100. This number is the last fibonnacci number of the series you must print.
Fibonacci series is a popular number series, in which a number is equal to sum of previous two numbers, starting from third.

## Multiplication table
Write a program that prints out the multiplication table for 1 to 10.

## Anadiploza
An anadiploza is a word which starts with two successive equal parts eg. Barbara. Write a program to determine whether a word that is entered via the keyboard, is an anadiploza or not. The program doesn't differentiate between small and large letters.

## Number of digits - Input
Write a program which reads integers from the standard input. The numbers should be between 1 and 1000. Entering numbers is ended by typing X. Find and print the number with the largest number of digits. 

## Two numbers with the most divisors
Write a program that generates 100 random numbers between 2000 and 5000. Once the numbers have been generated, find and display the two different numbers with the most divisors. For instance, if the inputs are 12, 6 and 5: 12 has six divisors (1, 2, 3, 4, 6, and 12). 6 has four divisors (1, 2, 3, and 6). But 5 only has two divisors (1 and 5).

## Divisible by the sum of digits
Write a program that will print all the natural numbers between 2000 and 5000 that are divisible by the sum of their digits. Print on each line the number and the sum of its digits.

**EXAMPLES:**

555 15

1000 1

234 9

## Count vowels
Write a program that creates two characters (sprites). The first character (sprite) reads 10 words, entered by the user. These words will be strings of random ASCII characters. Each word will be completed by pressing Enter.
The second character (sprite) will count and return the number of vowels. Each word may consist of uppercase and / or lowercase letters. Finally, display the word with the most vowels.

## A large number - The sum of digits
Write a program that reads a 20-digit number and prints out the number of frequencies of '0', '1', '2' .. '9' and the sum of its digits.

**EXAMPLE:**

00000000001111111111

0: 10

1: 10

2: 0

3: 0

4: 0

5: 0

6: 0

7: 0

8: 0

9: 0

Sum of digits: 10

## Stuttering
Write a program that will stutter words. The program will read the following three sets of inputs, namely: 
1) The words that should be stuttered,
2) How many characters from the beginning of each word should be stuttered,
3) The frequency of the stuttered part for each word. 
The program should check the suitability of the data, which means that the number of stuttered characters can not exceed the length of the word, and the number of repetitions must be a non-negative number. If the inputs are not adequate, the program displays an appropriate message. The first set of inputs is ended by inputting the word "END". After that, the program will ask for the other inputs and then output the stuttered words.

**EXAMPLE RUN:**

+ Word: kodak  
+ Word: panika  
+ Word: cry  
+ Word: end

+ Num of ch: 2  
+ Num of ch: 2  
+ Num of ch: 1

+ Frequency: 2  
+ Frequency: 0  
+ Frequency: 5

+ Answer: kokodak  
+ Answer: nika  
+ Answer: cccccry