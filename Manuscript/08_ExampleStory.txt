# Example Story {#ExampleStory}

In this chapter, we have described an example of what ping pong programming could look like.

Alex: “Hi Charlie, I’ll be right with you. Let me get a coffee first. Black with a bit of sugar for you, yes?”

Charlie: “Oh that would be nice Alex, yes. It’s a C352 on the new machine.”

Meanwhile Charlie closes all the unnecessary applications that are open, wondering: “Why do I keep so many things open all the time? And these internet tabs? When did I last revisit or check them? Oh look, that was for that concert I want to go to. When is it again? Oh, too bad - that was last Sunday.”

Alex sits down, bringing a nice cup of Charlie’s favorite coffee. Alex has also brought an index card with the user story for the Symmetric Numbers problem they have agreed to work on.

They look at it together:

* Write a program that generates 100 random numbers between 1000 and 9999. Once the numbers have been generated, find and display the numbers which are “axially symmetric”, which means that their records are of type XYYX. For instance, 1221 is axially symmetric.

Charlie sips at the coffee and says: “These BAs seem to come up with ever-crazier ideas.”

Alex chuckles: “Yeah, that’s a big part of what I like about this job, writing software for crazy Albert.”

Although they haven’t started yet, they are already making sure they’re aligned.

Alex plugs in a vertical mouse and grabs the keyboard, to launch eclipse and open up the project where this story belongs.

Alex creates a class RandomNumberTest using the wizard, and gets this:

{lang=java}
~~~~~~~
    import static org.junit.Assert.*;
    import org.junit.After;
    import org.junit.Before;
    import org.junit.Test;

    public class RandomNumberTest {

      @Before
      public void setUp() throws Exception {
      }

      @After
      public void tearDown() throws Exception {
      }

      @Test
      public void test() {
        fail("Not yet implemented");
      }
    }
~~~~~~~

As Alex hasn’t used Charlie’s machine in a while, Alex even runs the test. It’s red. Alex smiles and hands the keyboard to Charlie. “It’s red. Your turn.”

Charlie looks at Alex, almost turning red too. “Oh, you,” Alex says, realising that it’s a joke. Alex grabs the keyboard, laughs and says: “I’ll write you a red test”.

From a distance, you might think Charlie and Alex are not getting along. But in reality it’s this kind of joke that releases their pressure. They have been in the same team for about five years. Just like with an older married couple they disagree on when they first met, other than that they get along really well.

Charlie renames the test() test to containsHundredNumbers and quickly adds two lines of code.

{lang=java}
~~~~~~~
    @Test
    public void containsHunderdNumbers() {
      Producer p = new Producer();
      assertEquals(100, p.count());
    }
 ~~~~~~~

Although the project no longer compiles, Alex is already eager to solve the test. Alex adds the Producer class with one function and one line of code.

{lang=java}
~~~~~~~
    public class Producer {
      public int count() {
        return 100;
      }
    }
~~~~~~~

Alex smiles as the test is run and for sure, the test is green. They are very well aware that they faked it, but they have learned that they should only do the bare minimum. Alex knows that Charlie will jump on it the moment Alex does any more than just the bare minimum. And still they both realise that they are only faking it. Oh well. Let’s start working on a new test that will make it a little better.

Charlie: “Ahem”.

Alex looks up, thinking: What did I forget? The test is green. Damn. Think: Red, Green, Refactor.

“Thanks!” says Alex, grabbing the keyboard again and rewriting the code a little, into:

{lang=java}
~~~~~~~
    @Test
    public void containsHunderdNumbers() {
	  Producer myProducer = new Producer();
      assertEquals(100, myProducer.count());
    }
~~~~~~~

Alex reruns the test, and it stays green. So Alex adds the test already thought of:

{lang=java}
~~~~~~~
	@Test
	public void isBiggerThen1000() {
		producer myProducer = new producer();
		assertTrue(myProducer.number(0) > 1000);
	}
~~~~~~~

Charlie is surprised: “Oh, I hadn’t thought about testing this. I was already thinking about how we could be sure we had 100 numbers, but yes. This forces me to actually have a number.”

Charlie pauses. “Or does it?”

With a big evil grin, Charlie puts the coffee down and grabs the keyboard. Charlie writes:

{lang=java}
~~~~~~~
    public int number(int index ) {
      return 4587;
    }
~~~~~~~

…and laughs out loud when the test is green. And pushes everything to the source control system.

Alex realises that Alex forgot that step, just before. Oh well, they’ve only been programming for about 5 minutes, it’s not that big a deal. Still, there was no check in and Alex wants to do better.

Alex focuses back to the screen, and realises that Charlie has already refactored something and rerun the tests. Green again.

Alex: “Sorry, you’re a bit too fast for me. I got distracted by your committing - what were you refactoring?

Charlie: “How can a commit distract you? I didn’t put in a silly comment did I?”

Alex: “Nah, I was just embarrassed I hadn’t done it.”

Charlie: “Ah well, you did the refactoring when I forgot.”

Alex: “Looks like we need both of our brains this morning to have effective code.” Charlie: “Yes, and more coffee. I’ll get us some more while you figure out the refactoring.” 

Alex reads:

{lang=java}
~~~~~~~
    public class RandomNumberTest {
      Producer myProducer;

      @Before
      public void setUp() throws Exception {
        myProducer = new Producer();
      }

      @After
      public void tearDown() throws Exception {
      }

      @Test
      public void containsHunderdNumbers() {
        assertEquals(100, myProducer.count());
      }

      @Test
      public void isBiggerThen1000() {
        assertTrue(myProducer.number(0) > 1000);
      }
    }
~~~~~~~

“Hmm, Ok, so reusing myProducer, why not. I don’t think this will hold up, because we’ll probably split these tests into two classes later, but for now, yeah, why not.”

There seems to be a big queue at the coffee machine. Alex adds another test while waiting for Charlie.

{lang=java}
~~~~~~~
    @Test
    public void isSmallerThen9999() {
		  assertTrue(myProducer.number(0) > 9999);
    }
~~~~~~~

Alex smiles, happy to have a test that will be green without changing the code, even if it contains a buggy number. Alex runs the test and what? RED? What the hell? Damn. A copy / paste error. Let’s quickly change that into

{lang=java}
~~~~~~~
    @Test
    public void isSmallerThen9999() {
      assertTrue(myProducer.number(0) < 9999);
    }
~~~~~~~

So now they have three green tests. Alex commits the code and while accepting the coffee from Charlie, Alex thinks about refactoring. There isn’t really an opportunity here.

Alex: “I don’t see anything I can refactor now, so let’s get straight on with a new test.”

Charlie: “Let me see.” Charlie scans the code while taking a couple of sips of coffee. “No, I guess you’re right”. Charlie starts with

{lang=java}
~~~~~~~
    @Test
    public void onlyReturnsAxiallySymmetricNumbers() {

    }
~~~~~~~

Then Charlie pauses, thinking about how to do it.

Alex: “What if you pass an array with both good and bad examples to a function, then check that what’s returned only contains the Axially Symmetrics?” Charlie nods. “Yes, that’ll do.”

{lang=java}
~~~~~~~
    @Test
    public void onlyReturnsAxiallySymmetricNumbers() {
      int[] startNumbers = {1458, 4587, 1441, 6996};
      ArrayList<Integer> resultNumbers = myProducer.axiallySymetrics(startNumbers);
      assertTrue(resultNumbers.size() == 2);
    }
~~~~~~~

Not the nicest code, but a good start. Charlie passes the keyboard to Alex, who adds the next piece of code:

{lang=java}
~~~~~~~
    public ArrayList<Integer> axiallySymetrics(int[] startNumbers ) {
      ArrayList<Integer> resultNumbers = new ArrayList<Integer>(Arrays.asList(1441, 6996));
      return resultNumbers;
    }
~~~~~~~

Charlie runs the test, and it passes. Alex commits the code.

Charlie thinks: Hmm, the test name is not really correct. We are indeed only returning the Axially Symmetric numbers, but we’re not testing that. I’m not sure yet what would be a better name.

But while Charlie is wondering about that, Alex is already adding the next test.

{lang=java}
~~~~~~~
    @Test
    public void numberIsAxiallySymmetric() {
      assertTrue(myProducer.isAxiallySymetric(1441));
    }
~~~~~~~

Charlie feels sidetracked. Charlie was thinking about adding some more tests and code about the array. Ah well, the function is really the core of the story so Alex is right - they should start working on it.

Charlie quickly writes:

{lang=java}
~~~~~~~
    public boolean isAxiallySymetric(int numberToCheck) {
      return true;
    }
~~~~~~~

Yep, stick to basics. It turns green again. Charlie commits the code, changes the name of the test and adds another test.

{lang=java}
~~~~~~~
	@Test
    public void oneFourFourOneIsAxiallySymmetric() {
      assertTrue(myProducer.isAxiallySymetric(1441));
    }

    @Test
    public void oneTwoThreeFourIsNotAxiallySymmetric() {
      assertFalse(myProducer.isAxiallySymetric(1234));
    }
~~~~~~~

Alex thinks, finally we can stop fooling the tests. Let’s add some real code.

{lang=java}
~~~~~~~
    public boolean isAxiallySymetric(int numberToCheck) {
	  int firstNumber;
	  int secondNumber;
	  int thirdNumber;
	  int fourthNumber;
  	  String stringNumber;

      stringNumber = Integer.toString(numberToCheck);
      firstNumber = (int) stringNumber.charAt(0);
      secondNumber = (int) stringNumber.charAt(1);
      thirdNumber = (int) stringNumber.charAt(2);
      fourthNumber = (int) stringNumber.charAt(3);

      return (firstNumber == fourthNumber) && (firstNumber == fourthNumber) ;
    }
~~~~~~~

And yes, it turns green.

Charlie grins and says: “Yes, it’s green. Let me add another test.”

{lang=java}
~~~~~~~
    @Test
    public void oneTwoThreeOneIsNotAxiallySymmetric() {
      assertFalse(myProducer.isAxiallySymetric(1231));
    }
~~~~~~~

Alex scratches an itchy head. Why is this one red? “Oh right, another copy / paste error.”

{lang=java}
~~~~~~~
      return (firstNumber == fourthNumber) && (secondNumber == thirdNumber) ;
~~~~~~~

Alex looks at Charlie and says: “So, let’s take time to refactor some of the fake crap out of this code.”

Charlie nods: “Yep, now we know the tests are working.” 

Alex realigns the keyboard and types:

{lang=java}
~~~~~~~
    public ArrayList<Integer> axiallySymetrics(int[] startNumbers) {
      ArrayList<Integer> resultNumbers = new ArrayList<Integer>();

      for (int intValue: startNumbers) {
        if (isAxiallySymetric(intValue)) {
          resultNumbers.add(intValue);
        }
      }
      return resultNumbers;
    }
~~~~~~~

Alex reruns the tests and they stay green.

Charlie: “You know, as much as I hate the original function with the hard-coded values, I’m glad we did it. Because now I’m pretty confident that both the test and the code are working.” 

Alex: “That’s true, but we did make an assumption in the isAxiallySymetric function.”

Charlie: “Yeah well, it’s part of the spec that we only get numbers between 1000 and 9999.”

Alex: “That’s true, still I think we should assert for it. Remember the Ariane 5 bug? The rocket exploded because of a limitation in Ariane 4 that no longer existed in 5, but the code assumed it. We’d better protect ourselves from such a future change.”

Charlie: “You’re right, the BAs are crazy enough to change their minds anyway. So shall we make the function work with any number?”

Alex: “Nonono, that’s not what I’m saying. We can’t predict the future, so let’s not try. Remember we have to ship this thing. What we can do is verify that when we get the wrong kind of number, our function will raise an error. Remember the Code Complete book I told you you should read? That’s where I learned that.” Alex writes a new test.

{lang=java}
~~~~~~~
    @Test (expected=NumberTooSmallException.class)
    public void oneFourOneIsTooSMall() {
      myProducer.isAxiallySymetric(141);
    }
~~~~~~~

Alex passes the keyboard back to Charlie.

Charlie: “But you learned the trick from the book, I didn’t.”

Alex: “Yeah yeah, the fastest way to learn is just do it.”

Charlie: “I should have read the damn book.”

Alex puts on an evil grin: “That would have worked, too.”

Charlie: “Lets see: You’re expecting an exception I don’t know about. I assume I have to create it myself?”

Alex nods, while drinking some more coffee.

Charlie types:

{lang=java}
~~~~~~~
  public class NumberTooSmallException extends Exception {
    private static final long serialVersionUID = 0L;

    public NumberTooSmallException() {}

    public NumberTooSmallException(String message) {
      super(message);
    }

  }
~~~~~~~

Charlie then changes the isAxiallySymetric function to

{lang=java}
~~~~~~~
    public boolean isAxiallySymetric(int numberToCheck) throws NumberTooSmallException {
      int firstNumber;
      int secondNumber;
	  int thirdNumber;
	  int fourthNumber;
      String stringNumber;

      if (numberToCheck < 1001) {
        throw new NumberTooSmallException();
      }

      stringNumber = Integer.toString(numberToCheck);
      firstNumber = (int) stringNumber.charAt(0);
      secondNumber = (int) stringNumber.charAt(1);
      thirdNumber = (int) stringNumber.charAt(2);
      fourthNumber = (int) stringNumber.charAt(3);

      return (firstNumber == fourthNumber) && (secondNumber == thirdNumber);
    }
~~~~~~~

When eclipse warns about a missing format, Alex helps out by adding:

{lang=java}
~~~~~~~
    @Test(expected = NumberTooSmallException.class)
    public void oneFourOneIsTooSmall() throws NumberTooSmallException {
		  myProducer.isAxiallySymetric(141);
    }
~~~~~~~

When the compiler stops complaining about this test, Alex makes the same change to the other tests and fixes AxiallySymetrics along the way. Now everything compiles, and they have 9 green tests.

After the green build and the check in, Charlie adds the cousin test:

{lang=java}
~~~~~~~
    @Test(expected = NumberTooBigException.class)
    public void oneFourOneIsTooBig() throws NumberTooSmallException, NumberTooBigException {
      myProducer.isAxiallySymetric(14541);
    }
~~~~~~~

As this is so trivial, Charlie also adds this to isAxiallySymetric:

{lang=java}
~~~~~~~
      if (numberToCheck > 9999){
        throw new NumberTooBigException();
      }
~~~~~~~

Charlie then fixes the thrown parameters for the tests.

Alex: “Now that we have 10 green tests and the real hard work done, there’s only the constructor to fix that generates the random data, and they’re done.” Alex creates a first version of the constructor:

{lang=java}
~~~~~~~
    public Producer(){
	  numbers=new int [100];
      for(int counter = 0; counter < 100; counter++){
      }
    }
~~~~~~~

Charlie: “Well, we could be a little smarter and replace the 100 by a constant.” Charlie adds int MAX = 100;

Then Charlie replaces 100 with MAX, even in the count function.

{lang=java}
~~~~~~~
    public int count(){
      return MAX;
    }
~~~~~~~

Charlie reruns the tests. They stay green.

Alex takes over again and “finishes” the constructor by adding:

{lang=java}
~~~~~~~
      numbers[counter]=4587;
~~~~~~~

Then she adjusts the number function, too.

{lang=java}
~~~~~~~
      public int number(int index ) {
        return numbers[index];
      }
~~~~~~~

Charlie takes another sip from her coffee and looks up, just in time to see all the tests stay green.
